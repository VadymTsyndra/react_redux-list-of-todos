{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","app/hooks.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","visibleTodos","showSelectedUser","selectedTodo","length","className","map","classNames","id","completed","title","onClick","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoFilter","dispatch","updateFilter","value","filterActions","onSubmit","event","preventDefault","onChange","e","target","placeholder","style","pointerEvents","Loader","TodoModal","selectedUser","removeSelectedUser","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","setSelectedUser","useMemo","matchesQuery","toLowerCase","includes","useEffect","userId","todosActions","currentActions","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA4BrCE,EAfY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KACT,QACE,OAAOE,ICFAL,EAxBQ,SAACO,GAAD,MACnB,CACEL,KAAM,iBACNC,QAASI,IAqBAP,EAnBW,SAACO,GAAD,MACtB,CACEL,KAAM,oBACNC,QAASI,IAgBAP,EAbc,SAACO,GAAD,MACzB,CACEL,KAAM,uBACNC,QAASI,IAUAP,EA3BO,SAACO,GAAD,MAClB,CAAEL,KAAM,mBAAoBC,QAASI,IA0B1BP,EAPO,SAACQ,GAAD,MAClB,CACEN,KAAM,oBACNC,QAASK,IAqDEC,EAvCO,WAEhB,IADJJ,EACG,uDADK,CAAEE,MAAO,GAAIC,OAAQ,OAASF,EACnC,uCACH,OAAQA,EAAOJ,MACb,IAAK,uBACH,MAAO,CACLK,MAAOD,EAAOH,QACdK,OAAQ,aAGZ,IAAK,oBACH,MAAO,CACLD,MAAOD,EAAOH,QACdK,OAAQ,UAGZ,IAAK,mBACH,MAAO,CACLD,MAAOD,EAAOH,QACdK,OAAQH,EAAMG,QAGlB,IAAK,iBACH,MAAO,CACLD,MAAOD,EAAOH,QACdK,OAAQ,OAGZ,IAAK,oBACH,MAAO,CACLD,MAAO,GACPC,OAAQF,EAAOH,SAGnB,QACE,OAAOE,ICxEAL,EAHI,SAACU,GAAD,MACf,CAAER,KAAM,YAAaC,QAASO,IAejBC,EARM,WAAyD,IAAxDN,EAAuD,uDAAxC,KAAMC,EAAkC,uCAC3E,MAAoB,cAAhBA,EAAOJ,KACFI,EAAOH,QAGTE,GCTHO,EAAcC,0BAAgB,CAClCC,YAAaV,EACbW,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,mDCNPC,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,aAEA,OACE,uCACG,OAACF,QAAD,IAACA,KAAcG,SACd,mBAAGC,UAAU,0BAAb,mEAKCJ,KAAiB,OAACA,QAAD,IAACA,MAAcG,SACjC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGJ,EAAaK,KAAI,SAAA1B,GAAI,OACpB,qBAAkB,UAAQ,OAAOyB,UAAWE,IAAW,CAAE,6BAAyC,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAO5B,EAAK4B,KAAhH,UACE,oBAAIH,UAAU,eAAd,SAA8BzB,EAAK4B,KACnC,oBAAIH,UAAU,eAAd,SAA8BzB,EAAK6B,WAAa,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SAA+C,mBAAGA,UAAU,qBAC5G,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWE,IAAW,CACvB,mBAAoB3B,EAAK6B,UACzB,mBAAoB7B,EAAK6B,YAF3B,SAKG7B,EAAK8B,UAIV,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVxB,KAAK,SACL8B,QAAS,kBAAMT,EAAiBtB,IAJlC,SAME,sBAAMyB,UAAU,OAAhB,SACE,mBAAGA,UAAWE,IAAW,CACvB,oBAAgC,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAO5B,EAAK4B,GAC9C,aAA+B,OAAjBL,GAAyBA,EAAaK,KAAO5B,EAAK4B,eAvBjE5B,EAAK4B,gBCzCfI,EAAoCC,IACpCC,EAAkDC,ICKlDC,EAA8B,SAAC,GAGrC,IAFL9B,EAEI,EAFJA,MACAC,EACI,EADJA,OAEM8B,EAAWL,IAEXM,EAAe,SAACC,GACpB,MAAc,QAAVA,EACKC,EAA2BlC,GAGtB,WAAViC,EACKC,EAA8BlC,GAGzB,cAAViC,EACKC,EAAiClC,GAG5B,WAAViC,EACKC,EAA0BjC,GAG5BiC,EAA2BlC,IAGpC,OACE,uBACEmB,UAAU,mBACVgB,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGlB,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,MAAOhC,EACPqC,SAAU,SAACC,GAAD,OAAOR,EAASC,EAAaO,EAAEC,OAAOP,SAHlD,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGd,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRxB,KAAK,OACLwB,UAAU,QACVsB,YAAY,YACZR,MAAOjC,EACPsC,SAAU,SAACC,GAAD,OAAOR,EAASG,EAA0BK,EAAEC,OAAOP,WAE/D,sBAAMd,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBuB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRhD,KAAK,SACLwB,UAAU,SACVM,QAAS,kBAAMM,EAASC,EAAa,uBCtEpCY,G,MAAmB,kBAC9B,qBAAKzB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCON0B,EAA6B,SAAC,GAIpC,IAHL5B,EAGI,EAHJA,aACA6B,EAEI,EAFJA,aACAC,EACI,EADJA,mBAEA,OACE,sBAAK5B,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,sBAEb2B,GAAgB,cAAC,EAAD,IAEjBA,GACC,sBAAK3B,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYF,EAAaK,MAIzB,wBACE3B,KAAK,SACLwB,UAAU,SACV,UAAQ,cACRM,QAASsB,OAIb,sBAAK5B,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SAA4CF,EAAaO,QAEzD,oBAAGL,UAAU,QAAQ,UAAQ,aAA7B,WAEIF,EAAaM,WACb,wBAAQJ,UAAU,kBAAlB,qBAIDF,EAAaM,WACZ,wBAAQJ,UAAU,mBAAlB,kBAED,OACD,mBAAG6B,KAAI,iBAAYF,EAAaG,OAAhC,gBAA0CH,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAcI,oBC5CtE,SAASC,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICLMC,EAAgB,WAC3B,IAAM/B,EAAWL,IAEXvB,EAAQyB,GAAe,SAAA9B,GAAK,OAAIA,EAAMK,SACtCc,EAAeW,GAAe,SAAA9B,GAAK,OAAIA,EAAMS,eACnD,EAA0BqB,GAAe,SAAA9B,GAAK,OAAIA,EAAMU,UAAhDR,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,EAAwC8D,mBAAsB,MAA9D,mBAAOjB,EAAP,KAAqBkB,EAArB,KASMjD,EAAekD,mBAAQ,WAC3B,cAAO9D,QAAP,IAAOA,OAAP,EAAOA,EAAOK,QAAO,SAAAd,GACnB,IAAMwE,KAAyBxE,EAAK8B,OAAS,IALlC2C,cAAcC,SAASpE,EAAMmE,eAOxC,MAAe,cAAXlE,EACKP,EAAK6B,WAAa2C,EAGZ,WAAXjE,GACMP,EAAK6B,WAAa2C,EAGrBA,OAER,CAAC/D,EAAOF,EAAQD,IAkBnB,OAhBAqE,qBAAU,WDxBW,IAACC,ECyBfnE,GD3BqBgD,EAAY,UC4BzBO,MACT,SAAAE,GAAG,OAAI7B,EAASwC,EAAsBX,OAItC3C,GD/BgBqD,ECgCVrD,EAAaqD,ODhCgBnB,EAAG,iBAAiBmB,KCgC5BZ,MAC3B,SAAAE,GAAG,OAAII,EAAgBJ,MAGzBI,EAAgB,QAEjB,CAAC/C,IAGF,qCACE,qBAAKE,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEnB,MAAOA,EACPC,OAAQA,MAIZ,sBAAKkB,UAAU,QAAf,WACIhB,GAAS,cAAC,EAAD,MACRA,GACD,cAAC,EAAD,CACEY,aAAcA,EACdC,iBA1DS,SAACtB,GAAD,OAAgBqC,EAASyC,EAAuB9E,KA2DzDuB,aAAcA,cAQzBA,GACC,cAAC,EAAD,CACEA,aAAcA,EACd6B,aAAcA,EACdC,mBAtEmB,kBAAMhB,EAASyC,YChBtCC,EAAO,kBACX,cAAC,IAAD,CAAUhE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNiE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.a9164216.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\nexport type RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\nexport type SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type ChangeQueryAction = { type: 'filterTodo/query', payload: string };\ntype ShowAllTodosAction = { type: 'filterTodo/ALL', payload: string, };\ntype ShowActiveTodosAction = { type: 'filterTodo/Active', payload: string, };\ntype ShowCompletedTodosAction = {\n  type: 'filterTodo/Completed', payload: string };\ntype DeleteQueryAction = { type: 'filterTodo/Delete', payload: string };\n\nconst changeQuery = (query: string): ChangeQueryAction => (\n  { type: 'filterTodo/query', payload: query });\n\nconst showAllTodos = (query: string): ShowAllTodosAction => (\n  {\n    type: 'filterTodo/ALL',\n    payload: query,\n  });\nconst showActiveTodos = (query: string): ShowActiveTodosAction => (\n  {\n    type: 'filterTodo/Active',\n    payload: query,\n  });\n\nconst showCompletedTodos = (query: string): ShowCompletedTodosAction => (\n  {\n    type: 'filterTodo/Completed',\n    payload: query,\n  });\n\nconst deleteQuery = (status: string): DeleteQueryAction => (\n  {\n    type: 'filterTodo/Delete',\n    payload: status,\n  }\n);\n\nexport const actions = {\n  showAllTodos, showActiveTodos, showCompletedTodos, changeQuery, deleteQuery,\n};\n\ntype Action = ShowAllTodosAction\n| ShowActiveTodosAction\n| ShowCompletedTodosAction\n| ChangeQueryAction\n| DeleteQueryAction;\n\nconst filterReducer = (\n  state = { query: '', status: 'all' }, action: Action,\n) => {\n  switch (action.type) {\n    case 'filterTodo/Completed':\n      return {\n        query: action.payload,\n        status: 'completed',\n      };\n\n    case 'filterTodo/Active':\n      return {\n        query: action.payload,\n        status: 'active',\n      };\n\n    case 'filterTodo/query':\n      return {\n        query: action.payload,\n        status: state.status,\n      };\n\n    case 'filterTodo/ALL':\n      return {\n        query: action.payload,\n        status: 'all',\n      };\n\n    case 'filterTodo/Delete':\n      return {\n        query: '',\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nexport type SetTodosAction = { type: 'todos/ADD', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]):SetTodosAction => (\n  { type: 'todos/ADD', payload: todos });\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\ntype State = Todo[] | null;\n\nconst todosReducer = (state: State = null, action: Action): Todo[] | null => {\n  if (action.type === 'todos/ADD') {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { SetTodoAction } from '../../features/currentTodo';\n\ntype Props = {\n  visibleTodos: Todo[] | undefined;\n  showSelectedUser: (todo: Todo) => SetTodoAction;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  showSelectedUser,\n  selectedTodo,\n}) => {\n  return (\n    <>\n      {!visibleTodos?.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!!visibleTodos && !!visibleTodos?.length && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr key={todo.id} data-cy=\"todo\" className={classNames({ 'has-background-info-light': selectedTodo?.id === todo.id })}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">{todo.completed && <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>}</td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames({\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => showSelectedUser(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames({\n                        'far fa-eye-slash': selectedTodo?.id === todo.id,\n                        'far fa-eye': selectedTodo === null || selectedTodo.id !== todo.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\ntype Props = {\n  query: string;\n  status: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  status,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const updateFilter = (value: string) => {\n    if (value === 'all') {\n      return filterActions.showAllTodos(query);\n    }\n\n    if (value === 'active') {\n      return filterActions.showActiveTodos(query);\n    }\n\n    if (value === 'completed') {\n      return filterActions.showCompletedTodos(query);\n    }\n\n    if (value === 'delete') {\n      return filterActions.deleteQuery(status);\n    }\n\n    return filterActions.showAllTodos(query);\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => dispatch(updateFilter(e.target.value))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => dispatch(filterActions.changeQuery(e.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => dispatch(updateFilter('delete'))}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { RemoveTodoAction } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo;\n  selectedUser: User | null;\n  removeSelectedUser: () => RemoveTodoAction;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  selectedUser,\n  removeSelectedUser,\n}) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser && <Loader />}\n\n      {selectedUser && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeSelectedUser}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{selectedTodo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* For not completed */}\n              {!selectedTodo.completed && (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {/* For completed */}\n              {selectedTodo.completed && (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${selectedUser.email}`}>{selectedUser?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos, getUser } from './api';\nimport { Todo } from './types/Todo';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { actions as currentActions } from './features/currentTodo';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const showSelectedUser = (todo: Todo) => dispatch(currentActions.setTodo(todo));\n  const removeSelectedUser = () => dispatch(currentActions.removeTodo());\n\n  const isInQuery = (arg: string) => {\n    return !!arg.toLowerCase().includes(query.toLowerCase());\n  };\n\n  const visibleTodos = useMemo(() => {\n    return todos?.filter(todo => {\n      const matchesQuery = isInQuery(todo.title || '');\n\n      if (status === 'completed') {\n        return todo.completed && matchesQuery;\n      }\n\n      if (status === 'active') {\n        return !todo.completed && matchesQuery;\n      }\n\n      return matchesQuery;\n    });\n  }, [todos, status, query]);\n\n  useEffect(() => {\n    if (!todos) {\n      getTodos().then(\n        res => dispatch(todosActions.setTodos(res)),\n      );\n    }\n\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then(\n        res => setSelectedUser(res),\n      );\n    } else {\n      setSelectedUser(null);\n    }\n  }, [selectedTodo]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                status={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos && <Loader />}\n              {!!todos && (\n                <TodoList\n                  visibleTodos={visibleTodos}\n                  showSelectedUser={showSelectedUser}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          selectedUser={selectedUser}\n          removeSelectedUser={removeSelectedUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}